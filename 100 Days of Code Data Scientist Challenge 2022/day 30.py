# -*- coding: utf-8 -*-
"""
Created on Sun Nov 27 07:55:53 2022

@author: luisg
"""


import numpy as np

#Exercise 1
#The following array is given:

playway_values = np.array(
    [
        [305.0, 324.5, 283.5, 310.0, 64081.0],
        [325.5, 340.5, 320.0, 340.5, 55496.0],
        [324.0, 340.5, 315.0, 330.0, 36152.0],
        [344.0, 344.0, 310.0, 315.0, 35992.0],
        [306.5, 307.0, 291.0, 305.0, 32539.0],
        [274.0, 291.0, 250.0, 258.0, 79402.0],
        [278.0, 284.5, 256.0, 264.0, 35700.0],
        [270.0, 270.0, 238.5, 245.0, 60445.0],
        [218.0, 228.0, 196.0, 197.0, 94031.0],
        [210.0, 229.0, 198.8, 211.0, 100412.0],
        [205.0, 248.0, 197.8, 240.5, 50659.0],
        [245.0, 269.0, 232.5, 264.0, 99480.0],
        [264.0, 280.0, 251.0, 270.0, 70136.0],
        [267.0, 280.0, 267.0, 279.5, 30732.0],
        [297.5, 307.0, 280.0, 280.5, 43426.0],
        [274.0, 289.0, 258.0, 285.0, 37098.0],
        [305.0, 309.0, 296.5, 309.0, 31939.0],
        [313.0, 330.0, 295.0, 304.0, 46724.0],
        [300.0, 309.0, 295.5, 300.0, 27213.0],
        [302.0, 306.5, 290.0, 296.0, 13466.0],
        [299.0, 300.0, 287.0, 300.0, 10316.0],
        [302.5, 309.0, 302.0, 306.5, 15698.0],
    ]
)

#Calculate the new column: the difference between the highest and
#lowest price.

#Steps:

#Assign the calculated difference to the max_min_diff variable

#Add the calculated column (variable max_min_diff) to the
#array playway_values at the end.

#In response, print result to the console.




?np.min

max_min_diff = np.max(playway_values[:, :-1], axis=1) - np.min(playway_values[:, :-1], axis=1)
max_min_diff = np.expand_dims(max_min_diff, axis=1)
playway_values = np.append(playway_values, max_min_diff, axis=1)
print(playway_values)

#Solução do exercicio
#eu não tinha percebido mas a segunda linha é sempre a maior e a terceira
#é sempre a menor
max_min_diff = playway_values[:, [1]] - playway_values[:, [2]]
playway_values = np.concatenate((playway_values, max_min_diff), axis=1)
print(playway_values)




#Exercise 2
#The following array is given:

playway_values = np.array(
    [
        [305.0, 324.5, 283.5, 310.0, 64081.0, 41.0],
        [325.5, 340.5, 320.0, 340.5, 55496.0, 20.5],
        [324.0, 340.5, 315.0, 330.0, 36152.0, 25.5],
        [344.0, 344.0, 310.0, 315.0, 35992.0, 34.0],
        [306.5, 307.0, 291.0, 305.0, 32539.0, 16.0],
        [274.0, 291.0, 250.0, 258.0, 79402.0, 41.0],
        [278.0, 284.5, 256.0, 264.0, 35700.0, 28.5],
        [270.0, 270.0, 238.5, 245.0, 60445.0, 31.5],
        [218.0, 228.0, 196.0, 197.0, 94031.0, 32.0],
        [210.0, 229.0, 198.8, 211.0, 100412.0, 30.2],
        [205.0, 248.0, 197.8, 240.5, 50659.0, 50.2],
        [245.0, 269.0, 232.5, 264.0, 99480.0, 36.5],
        [264.0, 280.0, 251.0, 270.0, 70136.0, 29.0],
        [267.0, 280.0, 267.0, 279.5, 30732.0, 13.0],
        [297.5, 307.0, 280.0, 280.5, 43426.0, 27.0],
        [274.0, 289.0, 258.0, 285.0, 37098.0, 31.0],
        [305.0, 309.0, 296.5, 309.0, 31939.0, 12.5],
        [313.0, 330.0, 295.0, 304.0, 46724.0, 35.0],
        [300.0, 309.0, 295.5, 300.0, 27213.0, 13.5],
        [302.0, 306.5, 290.0, 296.0, 13466.0, 16.5],
        [299.0, 300.0, 287.0, 300.0, 10316.0, 13.0],
        [302.5, 309.0, 302.0, 306.5, 15698.0, 7.0],
    ]
)

#Extract rows from this array where closing price (column with index 3)
#is greater than 300.0. In response, print result to the console.



print(playway_values[playway_values[:,3]>300, :])




#Exercise 3
#The following array is given:

playway_values = np.array(
    [
        [305.0, 324.5, 283.5, 310.0, 64081.0, 41.0],
        [325.5, 340.5, 320.0, 340.5, 55496.0, 20.5],
        [324.0, 340.5, 315.0, 330.0, 36152.0, 25.5],
        [344.0, 344.0, 310.0, 315.0, 35992.0, 34.0],
        [306.5, 307.0, 291.0, 305.0, 32539.0, 16.0],
        [274.0, 291.0, 250.0, 258.0, 79402.0, 41.0],
        [278.0, 284.5, 256.0, 264.0, 35700.0, 28.5],
        [270.0, 270.0, 238.5, 245.0, 60445.0, 31.5],
        [218.0, 228.0, 196.0, 197.0, 94031.0, 32.0],
        [210.0, 229.0, 198.8, 211.0, 100412.0, 30.2],
        [205.0, 248.0, 197.8, 240.5, 50659.0, 50.2],
        [245.0, 269.0, 232.5, 264.0, 99480.0, 36.5],
        [264.0, 280.0, 251.0, 270.0, 70136.0, 29.0],
        [267.0, 280.0, 267.0, 279.5, 30732.0, 13.0],
        [297.5, 307.0, 280.0, 280.5, 43426.0, 27.0],
        [274.0, 289.0, 258.0, 285.0, 37098.0, 31.0],
        [305.0, 309.0, 296.5, 309.0, 31939.0, 12.5],
        [313.0, 330.0, 295.0, 304.0, 46724.0, 35.0],
        [300.0, 309.0, 295.5, 300.0, 27213.0, 13.5],
        [302.0, 306.5, 290.0, 296.0, 13466.0, 16.5],
        [299.0, 300.0, 287.0, 300.0, 10316.0, 13.0],
        [302.5, 309.0, 302.0, 306.5, 15698.0, 7.0],
    ]
)

#From this array extract the first 10 rows with the highest
#volume sorted in descending order.

#Solução do exercicio
playway_values[playway_values[:, 4].argsort()][::-1][:10]



#Exercise 4
#The following array is given:

playway_values = np.array(
    [
        [305.0, 324.5, 283.5, 310.0, 64081.0, 41.0],
        [325.5, 340.5, 320.0, 340.5, 55496.0, 20.5],
        [324.0, 340.5, 315.0, 330.0, 36152.0, 25.5],
        [344.0, 344.0, 310.0, 315.0, 35992.0, 34.0],
        [306.5, 307.0, 291.0, 305.0, 32539.0, 16.0],
        [274.0, 291.0, 250.0, 258.0, 79402.0, 41.0],
        [278.0, 284.5, 256.0, 264.0, 35700.0, 28.5],
        [270.0, 270.0, 238.5, 245.0, 60445.0, 31.5],
        [218.0, 228.0, 196.0, 197.0, 94031.0, 32.0],
        [210.0, 229.0, 198.8, 211.0, 100412.0, 30.2],
        [205.0, 248.0, 197.8, 240.5, 50659.0, 50.2],
        [245.0, 269.0, 232.5, 264.0, 99480.0, 36.5],
        [264.0, 280.0, 251.0, 270.0, 70136.0, 29.0],
        [267.0, 280.0, 267.0, 279.5, 30732.0, 13.0],
        [297.5, 307.0, 280.0, 280.5, 43426.0, 27.0],
        [274.0, 289.0, 258.0, 285.0, 37098.0, 31.0],
        [305.0, 309.0, 296.5, 309.0, 31939.0, 12.5],
        [313.0, 330.0, 295.0, 304.0, 46724.0, 35.0],
        [300.0, 309.0, 295.5, 300.0, 27213.0, 13.5],
        [302.0, 306.5, 290.0, 296.0, 13466.0, 16.5],
        [299.0, 300.0, 287.0, 300.0, 10316.0, 13.0],
        [302.5, 309.0, 302.0, 306.5, 15698.0, 7.0],
    ]
)

#Add to this array column that returns 1 in case the close price is higher
#than the open price, otherwise 0



maior = playway_values[:,2] >= playway_values[:,0]
playway_values = np.concatenate((playway_values,maior.reshape(-1,1)),
                                axis=1)

print(playway_values)

#SOLUÇÃO DO EXERCICIO
flag = playway_values[:, [0]] < playway_values[:, [3]]
flag = flag.astype(int)
playway_values = np.concatenate((playway_values, flag), axis=1)
print(playway_values)



